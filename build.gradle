import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'org.screamingsandals.nms-mapper' version '1.4.2'
}

group = 'ir.syrent.velocityvanish'
version = findProperty("version")

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    // Velocity-API / PaperLib / Folia
    maven {
        name 'papermc'
        url 'https://repo.papermc.io/repository/maven-public/'
    }

    // AdventureAPI/MiniMessage
    maven {
        name = "sonatype-oss-snapshots"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    // SpigotAPI
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

        // As of Gradle 5.1, you can limit this to only those
        // dependencies you expect from it
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }

    // VRuom
    /*maven {
        url = uri("https://maven.pkg.github.com/mohamad82bz/ruom")
        credentials {
            username = project.findProperty("gpr.user")
            password = project.findProperty("gpr.key")
        }
    }*/

    // ProtocolLib
    maven {
        url "https://repo.dmulloy2.net/repository/public/"
    }

    // PlaceholderAPI
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }

    // EssentialsX
    maven {
        url = 'https://repo.essentialsx.net/releases/'
    }

    // Update checker
    maven {
        name = "jeff-media-public"
        url = 'https://hub.jeff-media.com/nexus/repository/jeff-media-public/'
    }

    // DiscordSRV
    maven { url 'https://nexus.scarsz.me/content/groups/public/' }
}

dependencies {
    compileOnly 'com.velocitypowered:velocity-api:3.1.1'
    compileOnly 'org.spigotmc:spigot-api:1.19-R0.1-SNAPSHOT'
    compileOnly 'com.comphenix.protocol:ProtocolLib:5.0.0'
    compileOnly 'me.clip:placeholderapi:2.11.3'
    compileOnly 'xyz.jpenilla:squaremap-api:1.1.13'
    compileOnly 'net.essentialsx:EssentialsX:2.19.7'
    compileOnly 'org.spongepowered:configurate-yaml:4.1.2'
    compileOnly 'com.discordsrv:discordsrv:1.26.2'

    compileOnly files("libs/SayanChat-2.8.1-all.jar")
    compileOnly files('libs/ProCosmetics.jar')
    compileOnly files('libs/ServerListPlus-3.5.0-SNAPSHOT-Velocity.jar')

    implementation 'io.papermc:paperlib:1.0.8'
    implementation 'org.bstats:bstats-bukkit:3.0.2'

    // gson is not exist in legacy minecraft version
    implementation 'com.google.code.gson:gson:2.10.1'

//    implementation 'me.mohamad82:ruom-velocity:4.2.14'
    implementation 'com.github.cryptomorin:XSeries:9.3.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation 'net.kyori:adventure-api:4.13.1'
    implementation 'net.kyori:adventure-platform-bukkit:4.3.0'
    implementation 'net.kyori:adventure-text-minimessage:4.13.1'

    implementation 'com.jeff_media:SpigotUpdateChecker:3.0.2'

    annotationProcessor 'com.velocitypowered:velocity-api:3.1.1'

    compileOnly 'org.spigotmc:spigot:1.19.3-R0.1-SNAPSHOT:remapped-mojang'
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    minimize()

    manifest {
        attributes["Main-Class"] = 'ir.syrent.velocityvanish.velocity.VelocityVanish'
    }

    relocate('me.mohamad82.ruom', 'ir.syrent.velocityvanish.ruom')
    relocate('com.cryptomorin.xseries', 'ir.syrent.velocityvanish.xseries')
    relocate('kotlin', 'ir.syrent.velocityvanish.kotlin')
    relocate('com.jeff_media.updatechecker', 'ir.syrent.velocityvanish.updatechecker')

    relocate('com.google.gson', 'ir.syrent.velocityvanish.google.gson')
//    relocate('net.kyori.adventure', 'ir.syrent.velocityvanish.kyori.adventure')
    relocate('org.bstats', 'ir.syrent.velocityvanish.bstats')

    // @see https://youtrack.jetbrains.com/issue/KT-25709
    exclude '**/*.kotlin_metadata'
    exclude '**/*.kotlin_module'
    exclude '**/*.kotlin_builtins'

    archiveFileName = findProperty("plugin-name") + " v" + findProperty("version") + ".jar"
}

jar {
    archiveFileName = findProperty("plugin-name") + " v" + findProperty("version") + " " + "unshaded" + ".jar"
}

def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = 8
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.deprecation = true
    options.encoding = 'UTF-8'
}

compileJava.options.encoding = 'UTF-8'
compileJava.dependsOn clean

build.dependsOn shadowJar

tasks.withType(Jar).configureEach {
    destinationDirectory = file("$rootDir/bin/")
}

clean.doLast {
    file("${rootDir}/bin").deleteDir()
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}
sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })
rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates

/* First add a new source set. Don't use your main source set for generated stuff. */
sourceSets.main.java.srcDirs = ['src/generated/java', 'src/main/java']

/* All other things will be set inside the nmsGen method, */
nmsGen {
    basePackage = "ir.syrent.nms.accessors" // All generated classes will be in this package.
    sourceSet = "src/generated/java" // All generated classes will be part of this source set.
    minMinecraftVersion = '1.8'

    /* This means that the folder will be cleared before generation.
     *
     * If this value is false, old and no longer used classes won't be removed.
     */
    cleanOnRebuild = true

    /* Here we can define the classes */
    var ServerGamePacketListenerImpl = reqClass("net.minecraft.server.network.ServerGamePacketListenerImpl")
    var ClientboundUpdateMobEffectPacket = reqClass("net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket")
    var ClientboundRemoveMobEffectPacket = reqClass("net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket")
    var ClientboundPlayerInfoUpdatePacket = reqClass("net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket")
    var ClientboundPlayerInfoUpdatePacketAction = reqClass("net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket\$Action")
    var ClientboundPlayerInfoRemovePacket = reqClass("net.minecraft.network.protocol.game.ClientboundPlayerInfoRemovePacket")

    var ServerPlayer = reqClass("net.minecraft.server.level.ServerPlayer")
    var Packet = reqClass("net.minecraft.network.protocol.Packet")

    var MobEffect = reqClass("net.minecraft.world.effect.MobEffect")
    var MobEffectInstance = reqClass("net.minecraft.world.effect.MobEffectInstance")

    ServerGamePacketListenerImpl
            .reqMethod("send", Packet)
            .reqField("connection")
    ClientboundUpdateMobEffectPacket
            .reqConstructor(int, MobEffectInstance)
    ClientboundRemoveMobEffectPacket
            .reqConstructor(int, MobEffect)
    ClientboundPlayerInfoUpdatePacket
            .reqConstructor(ClientboundPlayerInfoUpdatePacketAction, ServerPlayer)
    ClientboundPlayerInfoUpdatePacketAction
            .reqField("UPDATE_GAME_MODE")
            .reqField("ADD_PLAYER")
            .reqField("ADD_PLAYER")
    ClientboundPlayerInfoRemovePacket
            .reqConstructor(List)
            .reqField("profileIds")

    ServerPlayer
            .reqField("connection")

    MobEffect
            .reqMethod("byId", int)
    MobEffectInstance
            .reqConstructor(MobEffect, int, int, boolean, boolean, boolean)
            .reqField("effect")
}
